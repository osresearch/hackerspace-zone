version: '3'
services:
  database:
    image: postgres:13.4-alpine
    restart: always
    #shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', "mastodon", "-d", "mastodon_production"]
    volumes:
      - ./data/database:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=mastodon
      - POSTGRES_PASSWORD=mastodon
        #- POSTGRES_DB=mastodon_production

  redis:
    restart: always
    image: redis:6-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./data/redis:/data

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "bootstrap.memory_lock=true"
    networks:
       - internal_network
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - ./data/elasticsearch:/usr/share/elasticsearch/data
    # fixup the permissions on the data directory since they are created as root on host
    entrypoint: /bin/sh -c "chown -R elasticsearch:elasticsearch data && /usr/local/bin/docker-entrypoint.sh eswrapper"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  mastodon:
    image: tootsuite/mastodon
    restart: always
    env_file:
      - ../env.production
      - env.production
      - env.secrets
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 6001"
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:6001/health || exit 1']
    ports:
      - '6001:6001'
    depends_on:
      - database
      - redis
      - es
    volumes:
      - ./data/system:/mastodon/public/system

  streaming:
    image: tootsuite/mastodon
    restart: always
    env_file:
      - ../env.production
      - env.production
      - env.secrets
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    ports:
      - '4000:4000'
    depends_on:
      - database
      - redis

  sidekiq:
    image: tootsuite/mastodon
    restart: always
    env_file:
      - ../env.production
      - env.production
      - env.secrets
    command: bundle exec sidekiq
    depends_on:
      - database
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - ./data/system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

  ## Uncomment to enable federation with tor instances along with adding the following ENV variables
  ## http_proxy=http://privoxy:8118
  ## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
  # tor:
  #   image: sirboops/tor
  #   networks:
  #      - external_network
  #      - internal_network
  #
  # privoxy:
  #   image: sirboops/privoxy
  #   volumes:
  #     - ./priv-config:/opt/config
  #   networks:
  #     - external_network
  #     - internal_network

networks:
  external_network:
  internal_network:
    internal: true
